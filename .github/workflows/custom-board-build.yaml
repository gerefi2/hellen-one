#
# see https://github.com/gerefi/fw-Paralela/blob/master/.github/workflows/compile-board.yaml as an example of how to build custom board firmware
#

name: Build Custom Board Firmware

on:
  workflow_call:
    inputs:
      token:
        description: 'Token for accessing private repos'
        required: false
        type: string
      gerefi_dir:
        required: false
        type: string
        default: ext/gerefi
      board_dir:
        required: false
        type: string
        default: .
      bundle_name:
        required: false
        type: string
    secrets:
      MY_REPO_PAT:
        required: false
      gerefi_ONLINE_FTP_USER:
        required: false
      gerefi_ONLINE_FTP_PASS:
        required: false
      gerefi_FTP_SERVER:
        required: false
      gerefi_SSH_SERVER:
        required: false
      gerefi_SSH_USER:
        required: false
      gerefi_SSH_PASS:
        required: false
      ADDITIONAL_ENV:
        required: false

jobs:
  create-board:
    runs-on: ubuntu-latest

    steps:
      - name: Set Token
        run: |
          if ! [[ -z "${{ inputs.token }}" ]]; then
            echo "Got token input"
            echo "TOKEN=${{ inputs.token }}" >> "$GITHUB_ENV"
          elif ! [[ -z "${{ secrets.MY_REPO_PAT }}" ]]; then
            echo "Using current secret"
            echo "TOKEN=${{ secrets.MY_REPO_PAT }}" >> "$GITHUB_ENV"
          else
            echo "Using current token"
            echo "TOKEN=${{ github.token }}" >> "$GITHUB_ENV"
          fi

      - name: Echo
        run: |
          echo "bundle_name=${{inputs.bundle_name}}"
          echo "gerefi_dir=${{inputs.gerefi_dir}}"
          echo "board_dir=${{inputs.board_dir}}"

      - uses: actions/checkout@v4
        with:
          token: ${{ env.TOKEN }}
          submodules: recursive

      - name: Invoking Post-Checkout Action
        run: |
          if [ -f .github/workflows/actions/post-checkout.sh ]; then
            bash .github/workflows/actions/post-checkout.sh
          fi

      - name: Set Env Variables
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        run: |
          echo "REF=${{github.ref_name}}" >> $GITHUB_ENV
          ROOT_DIR="../$(echo ${{inputs.gerefi_dir}} | sed -E 's/[^/]{2,}/../g')"
          cd ${{inputs.gerefi_dir}}/firmware
          BOARD_DIR=$(realpath --relative-to=. "$ROOT_DIR/${{inputs.board_dir}}")
          BOARD_META_PATH=$(bash bin/find_meta_info.sh "$BOARD_DIR" "${{inputs.bundle_name}}")
          source config/boards/common_script_read_meta_env.inc "$BOARD_META_PATH"
          echo "BOARD_META_PATH=$BOARD_META_PATH" >> $GITHUB_ENV
          echo "BOARD_DIR=$BOARD_DIR" >> $GITHUB_ENV
          echo "SHORT_BOARD_NAME=$SHORT_BOARD_NAME" >> $GITHUB_ENV
          echo "BUNDLE_NAME=$SHORT_BOARD_NAME" >> $GITHUB_ENV
          cd ..
          echo "META_OUTPUT_ROOT_FOLDER=$(realpath firmware/$BOARD_DIR/generated)/" >> $GITHUB_ENV
          echo "${{ secrets.ADDITIONAL_ENV }}" >> $GITHUB_ENV
          echo "BUNDLE_SIMULATOR=no" >> $GITHUB_ENV

      - name: Install Arm GNU Toolchain (arm-none-eabi-gcc)
        if: ${{ env.skip != 'true' }}
        uses: carlosperate/arm-none-eabi-gcc-action@v1
        with:
          release: '12.3.Rel1'

      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Test Compiler
        run: javac -version

      - name: Install Tools
        run: |
          sudo bash ${{inputs.gerefi_dir}}/misc/actions/add-ubuntu-latest-apt-mirrors.sh
          sudo apt-get install sshpass sshpass mtools

      - name: Repo Status
        run: |
          git status

      - name: gerefi_dir Status
        working-directory: ${{inputs.gerefi_dir}}
        run: |
          if [ -d .git ]; then
            git status
          else
            echo Not a repository
          fi

      - name: Configs build_server upload SSH variables
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        run: |
          if [ "${{github.event_name}}" = "push" ] && [ "${{github.ref}}" = "refs/heads/master" ]; then
            echo "Setting credentials..."
            echo "gerefi_SSH_SERVER=${{secrets.gerefi_SSH_SERVER}}" >> $GITHUB_ENV
            echo "gerefi_SSH_USER=${{secrets.gerefi_SSH_USER}}" >> $GITHUB_ENV
            echo "gerefi_SSH_PASS=${{secrets.gerefi_SSH_PASS}}" >> $GITHUB_ENV
          else
            echo "NOT setting credentials: ${{github.event_name}} ${{github.ref}}"
          fi

      - name: Build Firmware
        working-directory: ${{inputs.gerefi_dir}}/firmware
        run: bash bin/compile.sh -b ${{ env.BOARD_META_PATH }} deliver/gerefi.bin

      - name: Push Config
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub git update Action"
          git add generated/*
          OUT=$(git commit -am "GHA Automation" 2>&1) || echo "commit failed, finding out why"
          if echo "$OUT" | grep 'nothing to commit'; then
            echo "Configs: looks like nothing to commit"
            exit 0
          fi
          git status

      - name: Connectors Status
        run: |
          git status

      - name: Push Connectors
        run: |
          if [ -d connectors ]; then
            git add connectors/*
          fi
          OUT=$(git commit -am "GHA Connectors Generated" 2>&1) || echo "commit failed, finding out why"
          if echo "$OUT" | grep 'nothing to commit'; then
            echo "Connectors: looks like nothing to commit"
            exit 0
          fi
          echo "[$OUT]"

      - name: Push
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ github.token }}

      - name: Upload .ini files to gerefi Online server
        working-directory: generated/tunerstudio/generated
        run: ../../../${{inputs.gerefi_dir}}/firmware/tunerstudio/upload_ini.sh ${{ secrets.gerefi_ONLINE_FTP_USER }} ${{ secrets.gerefi_ONLINE_FTP_PASS }} ${{ secrets.gerefi_FTP_SERVER }}

      - name: Upload github action bin artifact
        uses: actions/upload-artifact@v4
        with:
          name: gerefi.bin
          path: ${{inputs.gerefi_dir}}/firmware/deliver/gerefi*.bin

      - name: Upload github action srec artifact
        uses: actions/upload-artifact@v4
        with:
          name: gerefi_update.srec
          path: ${{inputs.gerefi_dir}}/firmware/build/gerefi.srec

      - name: Upload github action hex artifact
        uses: actions/upload-artifact@v4
        with:
          name: gerefi.hex
          path: ${{inputs.gerefi_dir}}/firmware/build/gerefi*.hex

      - name: Upload github action list artifact
        uses: actions/upload-artifact@v4
        with:
          name: gerefi.list
          path: ${{inputs.gerefi_dir}}/firmware/build/gerefi*.list

      - name: Upload github action map artifact
        uses: actions/upload-artifact@v4
        with:
          name: gerefi.map
          path: ${{inputs.gerefi_dir}}/firmware/build/gerefi*.map

      - name: Upload github action elf artifact
        uses: actions/upload-artifact@v4
        with:
          name: gerefi.elf
          path: ${{inputs.gerefi_dir}}/firmware/build/gerefi*.elf

      - name: Upload github action bundle artifact
        uses: actions/upload-artifact@v4
        with:
          name: gerefi_bundle_${{env.SHORT_BOARD_NAME}}.zip
          path: ${{inputs.gerefi_dir}}/artifacts/gerefi_bundle*.zip
