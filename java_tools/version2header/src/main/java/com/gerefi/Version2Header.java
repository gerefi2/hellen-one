package com.gerefi;

import java.io.*;
import java.util.Date;

/**
 * Andrey Belomutskiy (c) 2014
 */
public class Version2Header {
    private static final String NL = "\n";//System.getProperty("line.separator");

    private static final String SVN_COMMAND = "svn info ";
    private static final String VERSION_MARKER = "Last Changed Rev: ";
    private static final String HEADER_TAG = "VCS_VERSION";
    private static final String GIT_HASH_TAG = "GIT_HASH";

    public static void main(String[] args) throws IOException {
        if (args.length != 3) {
            System.out.println("offset, URL and githash should be specified");
            System.exit(-1);
        }
        int versionOffsetValue = Integer.parseInt(args[0]);
        String url = args[1];
        String gitHash = args[2];
        System.out.println("Hi, it's " + new Date());
        if (url.isEmpty()) {
            System.out.println("Looking for local version");
        } else {
            System.out.println("Looking for remove version: " + url);
        }
        String command = SVN_COMMAND + url;

        System.out.println("Working with " + NL.length() + " line ends, offset " + versionOffsetValue);
        Process simulatorProcess = null;
        try {
            System.out.println("Executing [" + command + "]");
            simulatorProcess = Runtime.getRuntime().exec(command);

            BufferedReader stdout =
                    new BufferedReader(new InputStreamReader(simulatorProcess.getInputStream()));

            int counter = 0;
            String line;
            while ((line = stdout.readLine()) != null) {
                System.out.println("from " + command + ": " + line);
                counter++;

                if (line.startsWith(VERSION_MARKER)) {
                    String ver = line.substring(VERSION_MARKER.length());
                    System.out.println("Version [" + ver + "]");
                    int version = Integer.parseInt(ver);
                    writeFile(versionOffsetValue + version, gitHash);
                }
            }
            System.out.println("Got " + counter + " lines of stdout");

            while ((line = stdout.readLine()) != null) {
                System.out.println("Stderr: " + line);
            }
        } catch (Throwable e) {
            System.err.println("Ops: " + e);
            e.printStackTrace();
        } finally {
            if (simulatorProcess != null)
                simulatorProcess.destroy();
        }
    }

    private static void writeFile(int version, String gitHash) throws IOException {
        BufferedWriter bw = new BufferedWriter(new FileWriter("svnversion.h"));
        bw.write("// This file was generated by Version2Header" + NL);
        bw.write("// " + new Date() + NL);
        bw.write(NL + NL);
        bw.write("#ifndef " + GIT_HASH_TAG + NL);
        bw.write("#define " + GIT_HASH_TAG + " \"" + gitHash + "\"" + NL);
        bw.write("#endif" + NL);
        bw.write(NL + NL);
        bw.write("#ifndef " + HEADER_TAG + NL);
        bw.write("#define " + HEADER_TAG + " \"" + version + "\"" + NL);
        bw.write("#endif" + NL);
        bw.close();
    }
}
